class C
{
    {
        //...
        intercept method(a)
            { // OPTIONAL CHARACTER
                void (int a)  // IT WOULD BE TRULY UGLY TO ALLOW THROWS, do not implement, no matter how easy it is!
                {
                    //Do something
                }
                /**
                 * ...summary...
                 *
                 * @param  a  ...param-a...
                 */
                synchronized int (final int a)
                {
                    //Do something else
                }
                int (int a, int b)
                {
                    //Do something different
                }
                // ADDITIONAL BODIES &C MUST NOT BE ADDED
            } // MUST EXACT IFF THE FRIST OPTIONAL CHARACTER EXISTS
            ;
        //int
    }

    /**
     * @intercept    void(int a)        ...1-desc-summmary...
     * @interparam   a                  ...1-desc-param-a...
     * @intercept    int(int a)         ...2-desc-summmary...
     * @interparam   a                  ...2-desc-param-a...
     * @interreturn                     ...2-desc-return...
     * @intercept    int(int a, int b)  ...3-desc-summmary...
     * @interparam   a                  ...3-desc-param-a...
     * @interparam   b                  ...3-desc-param-b...
     * @interreturn                     ...3-desc-return...
     */
    protected intercepted int method(int a) //intercepted (not reserved) must be added iff an temporary return exists
    {
        //...
        void return(a + 5);
        //...
        int c = int return(a + 5);
        //...
        c += int return(a, c);
        //...
    }
}



compiles to



class C
{
    /**
     * Used as the first argument for {@link method(IntereptionInterface1, int)}, see keyword 'intercepted'
     */
    protected interface IntereptionInterface1 //A NUMERAL WOULD BREAK BACKWARDS COMPATIBILTY
    {
        /**
         * ...1-desc-summmary...
         *
         * @param  a  ...1-desc-param-a...
         */
        public abstract void voidReturn(int a);
        
        /**
         * ...2-desc-summmary...
         *
         * @param   a  ...2-desc-param-a...
         * @return     ...2-desc-return...
         */
        public abstract int intReturn(int a);
        
        /**
         * ...3-desc-summmary...
         * 
         * @param   a  ...3-desc-param-a...
         * @param   b  ...3-desc-param-b...
         * @return     ...3-desc-return...
         */
        public abstract int intReturn(int a, int b);
        
    }
    
    /**
     * @param  $1  Autogenerated interception parameter, see keyword 'intercepted'
     */
    protected int method(final IntereptionInterface1 $1, int a)
    {
        //...
        $1.voidReturn(a + 5);
        //...
        int c = $1.intReturn(a + 5);
        //...
        c += $1.intReturn(a, c);
        //...
    }

    {
        method(new IntereptionInterface1()
            {
                /**
                 * ...1-desc-summmary...
                 *
                 * @param  a  ...1-desc-param-a...
                 */
                public void voidReturn(int a)
                {
                    //Do something
                }
                
                /**
                 * ...summary...
                 *
                 * @param  a  ...param-a...
                 */
                public synchronized int voidReturn(final int a)
                {
                    //Do something else
                }
                
                /**
                 * ...3-desc-summmary...
                 * 
                 * @param   a  ...3-desc-param-a...
                 * @param   b  ...3-desc-param-b...
                 * @return     ...3-desc-return...
                 */
                public int voidReturn(int a, int b)
                {
                    //Do something different
                }
                
            }, a);
    }
    
}


